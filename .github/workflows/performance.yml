name: Performance & Bundle Analysis

on:
  pull_request:
    branches: [main,development]
  push:
    branches: [main,development]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

permissions:
  contents: read
  pull-requests: write

jobs:
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for analysis
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Analyze bundle
        run: |
          # Install bundle analyzer if not present
          if ! npm list webpack-bundle-analyzer &>/dev/null; then
            npm install --no-save webpack-bundle-analyzer
          fi
          
          echo "Bundle analysis complete. Build size information:"
          du -sh build/ || du -sh dist/ || echo "No build directory found"
          
          # List large files in build directory
          echo "Large files in build:"
          find build/ -type f -size +100k 2>/dev/null | head -10 || echo "No large files found"
          
      - name: Check bundle size
        run: |
          BUILD_SIZE=$(du -sk build 2>/dev/null | cut -f1 || du -sk dist 2>/dev/null | cut -f1 || echo "0")
          echo "BUILD_SIZE_KB=$BUILD_SIZE" >> $GITHUB_ENV
          echo "Bundle size: ${BUILD_SIZE}KB"
          
          # Warning if bundle is too large (adjust threshold as needed)
          if [ "$BUILD_SIZE" -gt 5000 ]; then
            echo "⚠️ Warning: Bundle size is large (${BUILD_SIZE}KB)"
            echo "Consider code splitting or removing unused dependencies"
          else
            echo "✅ Bundle size is acceptable (${BUILD_SIZE}KB)"
          fi

  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Serve build locally
        run: |
          npx serve -s build -p 3000 &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Wait for server to start
          sleep 5
          curl -f http://localhost:3000 || echo "Server not ready"
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            http://localhost:3000
          configPath: '.lighthouserc.json'
          temporaryPublicStorage: true
          uploadArtifacts: true
        continue-on-error: true
        
      - name: Stop local server
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Analyze dependencies
        run: |
          echo "=== Package Information ==="
          npm list --depth=0 || true
          
          echo -e "\n=== Outdated Packages ==="
          npm outdated || true
          
          echo -e "\n=== Duplicate Dependencies ==="
          npx npm-check-duplicates || echo "No duplicate dependencies found"
          
          echo -e "\n=== Bundle Composition ==="
          # Show largest dependencies
          npm list --json --depth=0 | jq -r '.dependencies | keys[]' | head -10 || echo "Top dependencies listed"
          
      - name: Check for unused dependencies
        run: |
          # Install and run depcheck to find unused dependencies
          if ! command -v depcheck &> /dev/null; then
            npm install -g depcheck
          fi
          
          echo "=== Unused Dependencies Check ==="
          depcheck || echo "Depcheck analysis complete"